// Generated by CoffeeScript 1.12.4
var S_IFDIR, S_IFLNK, S_IFMT, S_IFREG, copyFile, copyLink, copyTree, fs, getMode, path, ref, removeTree;

path = require("path");

fs = require("fs");

ref = fs.constants, S_IFMT = ref.S_IFMT, S_IFREG = ref.S_IFREG, S_IFDIR = ref.S_IFDIR, S_IFLNK = ref.S_IFLNK;

exports.exists = function(filePath) {
  return getMode(filePath) !== void 0;
};

exports.isDir = function(filePath) {
  return getMode(filePath) === S_IFDIR;
};

exports.isFile = function(filePath) {
  return getMode(filePath) === S_IFREG;
};

exports.isLink = function(filePath) {
  return getMode(filePath) === S_IFLNK;
};

exports.readDir = function(dirPath) {
  var mode;
  if (!(mode = getMode(dirPath))) {
    throw Error("Cannot use `readDir` on a non-existent path: '" + dirPath + "'");
  }
  if (mode !== S_IFDIR) {
    throw Error("Expected a directory: '" + dirPath + "'");
  }
  return fs.readdirSync(dirPath);
};

exports.readFile = function(filePath, encoding) {
  var mode;
  if (!(mode = getMode(filePath))) {
    throw Error("Cannot use `readFile` on a non-existent path: '" + filePath + "'");
  }
  if (mode === S_IFDIR) {
    throw Error("Cannot use `readFile` on a directory: '" + filePath + "'");
  }
  if (encoding === void 0) {
    encoding = "utf8";
  }
  return fs.readFileSync(filePath, encoding);
};

exports.readLink = function(linkPath) {
  var mode;
  if (!(mode = getMode(linkPath))) {
    throw Error("Cannot use `readLink` on a non-existent path: '" + linkPath + "'");
  }
  if (mode === S_IFLNK) {
    return fs.readlinkSync(linkPath);
  }
  return linkPath;
};

exports.writeDir = function(dirPath) {
  var mode;
  if (!(mode = getMode(dirPath))) {
    exports.writeDir(path.dirname(dirPath));
    return fs.mkdirSync(dirPath);
  }
  if (mode !== S_IFDIR) {
    throw Error("Cannot use `writeDir` on an existing path: '" + dirPath + "'");
  }
};

exports.writeFile = function(filePath, string) {
  if (getMode(filePath) !== S_IFDIR) {
    return fs.writeFileSync(filePath, string);
  }
  throw Error("Cannot use `writeFile` on a directory: '" + filePath + "'");
};

exports.writeLink = function(linkPath, targetPath) {
  if (!getMode(linkPath)) {
    return fs.symlinkSync(targetPath, linkPath);
  }
  throw Error("Cannot use `writeLink` on an existing path: '" + linkPath + "'");
};

exports.removeDir = function(dirPath) {
  var mode;
  if (!(mode = getMode(dirPath))) {
    throw Error("Cannot use `removeDir` on a non-existent path: '" + dirPath + "'");
  }
  if (mode !== S_IFDIR) {
    throw Error("Expected a directory: '" + dirPath + "'");
  }
  if (".." === path.relative(process.cwd(), dirPath).slice(0, 2)) {
    throw Error("Cannot use `removeDir` on paths outside of the current directory: '" + dirPath + "'");
  }
  return removeTree(dirPath);
};

exports.removeFile = function(filePath) {
  var mode;
  if (!(mode = getMode(filePath))) {
    throw Error("Cannot use `removeFile` on a non-existent path: '" + filePath + "'");
  }
  if (mode === S_IFDIR) {
    throw Error("Cannot use `removeFile` on a directory: '" + filePath + "'");
  }
  return fs.unlinkSync(filePath);
};

exports.rename = function(oldPath, newPath) {
  if (getMode(oldPath)) {
    if (getMode(newPath) === S_IFDIR) {
      throw Error("Cannot overwrite directory path: '" + newPath + "'");
    }
    exports.writeDir(path.dirname(newPath));
    return fs.renameSync(oldPath, newPath);
  }
  throw Error("Cannot `rename` non-existent path: '" + oldPath + "'");
};

exports.copy = function(srcPath, destPath) {
  var destMode, mode;
  if (!(mode = getMode(srcPath))) {
    throw Error("Cannot `copy` non-existent path: '" + srcPath + "'");
  }
  destMode = getMode(destPath);
  if (mode === S_IFDIR) {
    return copyTree(srcPath, destPath, destMode);
  }
  if (destMode === S_IFDIR) {
    destPath = path.join(destPath, path.basename(srcPath));
    destMode = getMode(destPath);
  }
  if (destMode) {
    if (destMode === S_IFDIR) {
      throw Error("Cannot overwrite directory path: '" + destPath + "'");
    }
    fs.unlinkSync(destPath);
  }
  if (mode === S_IFLNK) {
    return copyLink(srcPath, destPath);
  } else {
    return fs.writeFileSync(destPath, fs.readFileSync(srcPath));
  }
};

getMode = function(filePath) {
  var mode;
  try {
    mode = fs.lstatSync(filePath).mode & S_IFMT;
  } catch (error) {}
  return mode;
};

copyLink = function(srcPath, destPath) {
  var filePath;
  filePath = fs.readlinkSync(srcPath);
  if (!path.isAbsolute(filePath)) {
    filePath = path.resolve(path.dirname(srcPath), filePath);
    filePath = path.relative(path.dirname(destPath), filePath);
  }
  return fs.symlinkSync(filePath, destPath);
};

copyFile = function(srcPath, destPath) {
  var destMode, mode;
  mode = getMode(srcPath);
  destMode = getMode(destPath);
  if (mode === S_IFDIR) {
    return copyTree(srcPath, destPath, destMode);
  }
  if (destMode) {
    if (destMode === S_IFDIR) {
      removeTree(destPath);
    } else {
      fs.unlinkSync(destPath);
    }
  }
  if (mode === S_IFLNK) {
    return copyLink(srcPath, destPath);
  } else {
    return fs.writeFileSync(destPath, fs.readFileSync(srcPath));
  }
};

copyTree = function(srcPath, destPath, destMode) {
  if (destMode && destMode !== S_IFDIR) {
    fs.unlinkSync(destPath);
  }
  if (destMode !== S_IFDIR) {
    fs.mkdirSync(destPath);
  }
  return fs.readdirSync(srcPath).forEach(function(file) {
    return copyFile(path.join(srcPath, file), path.join(destPath, file));
  });
};

removeTree = function(dirPath) {
  fs.readdirSync(dirPath).forEach(function(file) {
    var filePath;
    filePath = path.join(dirPath, file);
    if (getMode(filePath) === S_IFDIR) {
      return removeTree(filePath);
    } else {
      return fs.unlinkSync(filePath);
    }
  });
  return fs.rmdirSync(dirPath);
};
